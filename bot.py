import telebot
import config
import json
import random
import words

#–ü–æ–¥–∫–ª—é—á–∞—é —Ç–µ–ª–µ–≥—Ä–∞–º
from telebot import types
from datetime import datetime
from pathlib import Path

bot = telebot.TeleBot(config.TOKEN)

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
print('the bot was launched')
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
version = '0.1'
category = []
words_d = words.words_d
words_e = words.words_e
words_f = words.words_f
words_w = words.words_w
words_t = words.words_t
ids = []
answer = []
# –ü–µ—Ä–µ–≤–æ–¥ –≤ String
words_str = str(len(words_d)+len(words_e)+len(words_f)+len(words_w)+len(words_t))
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("üìì –£—Ä–æ–∫")
item2 = types.KeyboardButton("üìí –ò–≥—Ä–∞")
item3 = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
item4 = types.KeyboardButton("‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
#item5 = types.KeyboardButton("üí≥ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å")
item10 = types.KeyboardButton("üéñ –ù–∞–≥—Ä–∞–¥—ã")
markup.add(item1, item2, item3, item4, item10)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –£—Ä–æ–∫–∞
lesson1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
item6 = types.KeyboardButton("üìì –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞")
item7 = types.KeyboardButton("üìó        –¢–µ—Å—Ç—ã")
item8 = types.KeyboardButton("üìï –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ")
item9 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
lesson1.add(item6, item7, item8, item9)
#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
lesson = types.ReplyKeyboardMarkup(resize_keyboard=True)
li1 = types.KeyboardButton("üõÅ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ")
li2 = types.KeyboardButton("üìï –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
li3 = types.KeyboardButton("üçî –ï–¥–∞")
li4 = types.KeyboardButton("üëî –û–¥–µ–∂–¥–∞")
li5 = types.KeyboardButton("‚úà –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")
li6 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
lesson.add(li1, li2, li3, li4, li5, li6)
#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
nwords = types.ReplyKeyboardMarkup(resize_keyboard=True)
item11 = types.KeyboardButton("üö∞ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ")
item12 = types.KeyboardButton("üìñ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
item13 = types.KeyboardButton("üçú –ï–¥–∞")
item14 = types.KeyboardButton("üëï –û–¥–µ–∂–¥–∞")
item15 = types.KeyboardButton("üö¢ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")
item16 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
nwords.add(item11, item12, item13, item14, item15, item16)
#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–≤
test = types.ReplyKeyboardMarkup(resize_keyboard=True)
item17 = types.KeyboardButton("üëã –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ")
item18 = types.KeyboardButton("üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
item19 = types.KeyboardButton("üçü –ï–¥–∞")
item20 = types.KeyboardButton("üëó –û–¥–µ–∂–¥–∞")
item21 = types.KeyboardButton("üå¥ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")
item22 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
test.add(item17, item18, item19, item20, item21, item22)
#–ò–≥—Ä–∞
game = types.ReplyKeyboardMarkup(resize_keyboard=True)
item23 = types.KeyboardButton("üéÆ –ò–≥—Ä–∞")
item24 = types.KeyboardButton("üèÖ –†–µ–π—Ç–∏–Ω–≥")
item25 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
game.add(item23, item24, item25)
#–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ /start
@bot.message_handler(commands=['start']) 
def  welcome(message):
	uname = message.chat.username
	filename = Path("./users/" + uname+".txt")
	# myfile = open(filename, mode='r')
	# jdata = json.load(myfile)
	# reg = int(jdata['reg'])
	tst = filename.exists()
	if tst == 0:
		bot.send_message(message.chat.id, '‚Ä¢ –ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ! \n‚Ä¢ –Ø –±–æ—Ç-—É—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n‚Ä¢ –î–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìì –£—Ä–æ–∫', reply_markup=markup)
		#–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ username -> uname
		uname = message.chat.username
		iduser = str(message.chat.id)
		now = datetime.now()
		#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
		filename = "./users/" + uname+".txt"
		myfile = open(filename, mode='w')
		pro_file = {
		'username': uname,
		'ID': iduser,
		'data': datetime.strftime(datetime.now(), "%d.%m.%Y %H:%M:%S"),
		'lvl': 0,
		'xp': 0,
		'daily': 0,
		'education': 0,
		'food': 0,
		'wear': 0,
		'travel': 0,
		'reg':1,
		'admin': 0,
		'reward': 'no'
		}
		json.dump(pro_file, myfile)
		myfile.close ()
		#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		filename = "statistics.txt"
		myfile = open(filename, mode='r')
		jdata = json.load(myfile)
		regis = str(jdata['registered'])
		regisint = int(regis) + 1
		regisstr = str(regisint)
		myfile.close ()
		filename = "statistics.txt"
		myfile = open(filename, mode='w')
		quantity_regs = {
		'registered': regisstr,
		'test': 0
		}
		json.dump(quantity_regs, myfile)
		myfile.close ()
		#–í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
		print('new user: '+ uname)
		print('ID: '+ iduser)
		print('registered: ' + regisstr)
	else:
		bot.send_message(message.chat.id, 'üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!', reply_markup=markup)

#–õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞
# def newdaily(message):
# 	uname = message.chat.username
# 	filename = "./users/" + uname+".txt"
# 	myfile = open(filename, mode='r')
# 	nwd_data = json.load(myfile)
# 	xp = str(nwd_data['xp'])
# 	lvl = str(nwd_data['lvl'])
# 	daily = str(nwd_data['daily'])
# 	education = str(nwd_data['education'])
# 	food = str(nwd_data['food'])
# 	wear = str(nwd_data['wear'])
# 	travel = str(nwd_data['travel'])
# 	reg = str(nwd_data['reg'])
# 	myfile.close ()

# 	global category
# 	for x in range(0, len(ids)):
# 		if ids[x] == message.chat.id:
# 			category[x] = 6
# 	global task
# 	task = int(daily) + 1
# 	for x in range(0, len(ids)):
# 		if ids[x] == message.chat.id:
# 			while words_d[task][0] == answer[x]:
# 				task = daily
# 	ru, eng = words_d[task]
# 	for x in range(0, len(ids)):
# 		if ids[x] == message.chat.id:
# 			answer[x] = ru
# 	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
# 	correct = random.randrange(0, 4, 1)
# 	incorrect = [-1, -1, -1, -1]
# 	t = 0
# 	while t != 4:
# 		n = random.randrange(0, len(words_d), 1)
# 		if n != task and incorrect.count(n) == 0:
# 			incorrect[t] = n
# 			t+=1
# 	# for x in incorrect:
# 	# 	print(x)
			
# 	it = [
# 	types.KeyboardButton(words_d[incorrect[0]][0]),
# 	types.KeyboardButton(words_d[incorrect[1]][0]),
# 	types.KeyboardButton(words_d[incorrect[2]][0]),
# 	types.KeyboardButton(words_d[incorrect[3]][0]),
# 	types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
# 	]
# 	it[correct] = types.KeyboardButton(ru)
# 	keyboard.add(it[0], it[1], it[2], it[3], it[4])
# 	bot.send_message(message.chat.id, eng, reply_markup=keyboard)

# 	filename = "./users/" + uname+".txt"
# 	myfile = open(filename, mode='w')
# 	pro_file = {
# 	'username': uname,
# 	'lvl': lvl,
# 	'xp': xp,
# 	'daily': daily,
# 	'education': education,
# 	'food': food,
# 	'wear': wear,
# 	'travel': travel,
# 	'reg': reg
# 	}
# 	json.dump(pro_file, myfile)
# 	myfile.close ()

def words_daily(message):
	global category
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			category[x] = 1
	global task
	task = random.randrange(0, len(words_d), 1)
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			while words_d[task][0] == answer[x]:
				task = random.randrange(0, len(words_d), 1)
	ru, eng = words_d[task]
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			answer[x] = ru
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
	correct = random.randrange(0, 4, 1)
	incorrect = [-1, -1, -1, -1]
	t = 0
	while t != 4:
		n = random.randrange(0, len(words_d), 1)
		if n != task and incorrect.count(n) == 0:
			incorrect[t] = n
			t+=1
	# for x in incorrect:
	# 	print(x)
			
	it = [
	types.KeyboardButton(words_d[incorrect[0]][0]),
	types.KeyboardButton(words_d[incorrect[1]][0]),
	types.KeyboardButton(words_d[incorrect[2]][0]),
	types.KeyboardButton(words_d[incorrect[3]][0]),
	types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
	]
	it[correct] = types.KeyboardButton(ru)
	keyboard.add(it[0], it[1], it[2], it[3], it[4])
	bot.send_message(message.chat.id, eng, reply_markup=keyboard)

def words_education(message):
	global category
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			category[x] = 2
	global task
	task = random.randrange(0, len(words_e), 1)
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			while words_e[task][0] == answer[x]:
				task = random.randrange(0, len(words_e), 1)
	ru, eng = words_e[task]
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			answer[x] = ru
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
	correct = random.randrange(0, 4, 1)
	incorrect = [-1, -1, -1, -1]
	t = 0
	while t != 4:
		n = random.randrange(0, len(words_e), 1)
		if n != task and incorrect.count(n) == 0:
			incorrect[t] = n
			t+=1
	# for x in incorrect:
	# 	print(x)
			
	it = [
	types.KeyboardButton(words_e[incorrect[0]][0]),
	types.KeyboardButton(words_e[incorrect[1]][0]),
	types.KeyboardButton(words_e[incorrect[2]][0]),
	types.KeyboardButton(words_e[incorrect[3]][0]),
	types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
	]
	it[correct] = types.KeyboardButton(ru)
	keyboard.add(it[0], it[1], it[2], it[3], it[4])
	bot.send_message(message.chat.id, eng, reply_markup=keyboard)

def words_food(message):
	global category
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			category[x] = 3
	global task
	task = random.randrange(0, len(words_f), 1)
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			while words_f[task][0] == answer[x]:
				task = random.randrange(0, len(words_f), 1)
	ru, eng = words_f[task]
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			answer[x] = ru
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
	correct = random.randrange(0, 4, 1)
	incorrect = [-1, -1, -1, -1]
	t = 0
	while t != 4:
		n = random.randrange(0, len(words_f), 1)
		if n != task and incorrect.count(n) == 0:
			incorrect[t] = n
			t+=1
	# for x in incorrect:
	# 	print(x)
			
	it = [
	types.KeyboardButton(words_f[incorrect[0]][0]),
	types.KeyboardButton(words_f[incorrect[1]][0]),
	types.KeyboardButton(words_f[incorrect[2]][0]),
	types.KeyboardButton(words_f[incorrect[3]][0]),
	types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
	]
	it[correct] = types.KeyboardButton(ru)
	keyboard.add(it[0], it[1], it[2], it[3], it[4])
	bot.send_message(message.chat.id, eng, reply_markup=keyboard)

def words_wear(message):
	global category
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			category[x] = 4
	global task
	task = random.randrange(0, len(words_w), 1)
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			while words_w[task][0] == answer[x]:
				task = random.randrange(0, len(words_w), 1)
	ru, eng = words_w[task]
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			answer[x] = ru
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
	correct = random.randrange(0, 4, 1)
	incorrect = [-1, -1, -1, -1]
	t = 0
	while t != 4:
		n = random.randrange(0, len(words_w), 1)
		if n != task and incorrect.count(n) == 0:
			incorrect[t] = n
			t+=1
	# for x in incorrect:
	# 	print(x)
			
	it = [
	types.KeyboardButton(words_w[incorrect[0]][0]),
	types.KeyboardButton(words_w[incorrect[1]][0]),
	types.KeyboardButton(words_w[incorrect[2]][0]),
	types.KeyboardButton(words_w[incorrect[3]][0]),
	types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
	]
	it[correct] = types.KeyboardButton(ru)
	keyboard.add(it[0], it[1], it[2], it[3], it[4])
	bot.send_message(message.chat.id, eng, reply_markup=keyboard)

def words_travel(message):
	global category
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			category[x] = 5
	global task
	task = random.randrange(0, len(words_t), 1)
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			while words_t[task][0] == answer[x]:
				task = random.randrange(0, len(words_t), 1)
	ru, eng = words_t[task]
	for x in range(0, len(ids)):
		if ids[x] == message.chat.id:
			answer[x] = ru
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
	correct = random.randrange(0, 4, 1)
	incorrect = [-1, -1, -1, -1]
	t = 0
	while t != 4:
		n = random.randrange(0, len(words_t), 1)
		if n != task and incorrect.count(n) == 0:
			incorrect[t] = n
			t+=1
	# for x in incorrect:
	# 	print(x)
			
	it = [
	types.KeyboardButton(words_t[incorrect[0]][0]),
	types.KeyboardButton(words_t[incorrect[1]][0]),
	types.KeyboardButton(words_t[incorrect[2]][0]),
	types.KeyboardButton(words_t[incorrect[3]][0]),
	types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
	]
	it[correct] = types.KeyboardButton(ru)
	keyboard.add(it[0], it[1], it[2], it[3], it[4])
	bot.send_message(message.chat.id, eng, reply_markup=keyboard)

@bot.message_handler(content_types=['text'])
def logic(message):
	if ids.count(message.chat.id) == 0:
		ids.append(message.chat.id)
		answer.append('')
		category.append(0)
	# for x in ids:
	# 	print(x)
	# for x in answer:
	# 	print(x)
	now = datetime.now()
	print('[' + datetime.strftime(datetime.now(), "%H:%M:%S") + ']' +message.chat.username + ': ' + message.text)
	# –£—Ä–æ–∫
	if message.text == 'üìì –£—Ä–æ–∫':
		bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —É—Ä–æ–∫–∞:', reply_markup=lesson1)
	# –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞
	elif message.text == 'üìì –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞':
		bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–º—É:', reply_markup=nwords)
	# –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤—ã–µ
	elif message.text == 'üö∞ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
		# newdaily(message)
	# –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã–µ
	elif message.text == 'üìñ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# –ï–¥–∞ –Ω–æ–≤—ã–µ
	elif message.text == 'üçú –ï–¥–∞':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# –û–¥–µ–∂–¥–∞ –Ω–æ–≤—ã–µ
	elif message.text == 'üëï –û–¥–µ–∂–¥–∞':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –Ω–æ–≤—ã–µ
	elif message.text == 'üö¢ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# –¢–µ—Å—Ç
	elif message.text == 'üìó        –¢–µ—Å—Ç—ã':
		bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–º—É:', reply_markup=test)
	# üëã –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –¢–µ—Å—Ç—ã
	elif message.text == 'üëã –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¢–µ—Å—Ç—ã
	elif message.text == 'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# üçü –ï–¥–∞ –¢–µ—Å—Ç—ã
	elif message.text == 'üçü –ï–¥–∞':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# üëó –û–¥–µ–∂–¥–∞ –¢–µ—Å—Ç—ã
	elif message.text == 'üëó –û–¥–µ–∂–¥–∞':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# üå¥ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –¢–µ—Å—Ç—ã
	elif message.text == 'üå¥ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
	elif message.text == 'üìï –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ':
		bot.send_message(message.chat.id, '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å—Å—è —Å–ª–æ–≤–∞, –∞ –≤—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏—Ö –ø–µ—Ä–µ–≤–æ–¥ (—É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 1 –æ—á–∫–æ –æ–ø—ã—Ç–∞)')
		bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–º—É:', reply_markup=lesson)
	# –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ
	elif message.text == 'üõÅ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ':
		words_daily(message)
	# –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
	elif message.text == 'üìï –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ':
		words_education(message)
	# –ï–¥–∞
	elif message.text == 'üçî –ï–¥–∞':
		words_food(message)
	# –û–¥–µ–∂–¥–∞
	elif message.text == 'üëî –û–¥–µ–∂–¥–∞':
		words_wear(message)
	# –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
	elif message.text == '‚úà –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è':
		words_travel(message)
	# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	elif message.text == 'üîô –ù–∞–∑–∞–¥':
		for x in range(0, len(ids)):
			if ids[x] == message.chat.id:
				category[x] = 0
		bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –≤–æ—Ç –º–µ–Ω—é:', reply_markup=markup)
	elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
		for x in range(0, len(ids)):
			if ids[x] == message.chat.id:
				category[x] = 0
		bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –≤–æ—Ç –º–µ–Ω—é:', reply_markup=lesson1)
	# –ò–≥—Ä–∞
	elif message.text == 'üìí –ò–≥—Ä–∞':
		bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=game)
	# 
	elif message.text == 'üéÆ –ò–≥—Ä–∞':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	#
	elif message.text == 'üèÖ –†–µ–π—Ç–∏–Ω–≥':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# –ü—Ä–æ—Ñ–∏–ª—å
	elif message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
		uname = message.chat.username
		filename = "./users/" + uname+".txt"
		myfile = open(filename, mode='r')
		jdata = json.load(myfile)
		admin = int(jdata['admin'])
		if admin >= 1:
			bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
			for x in range(0, len(ids)):
				if ids[x] == message.chat.id:
					filename = message.text+".txt"
					myfile = open(filename, mode='r')
					jdata = json.load(myfile)
					full = str(int(jdata['daily'])+int(jdata['education'])+int(jdata['food'])+int(jdata['wear'])+int(jdata['travel']))
					bot.send_message(message.chat.id, 'üë§  –í–∞—à –Ω–∏–∫: ' + str(jdata['username']) + '\nü•á –í–∞—à —É—Ä–æ–≤–µ–Ω—å: ' + str(jdata['lvl']) + ' (' + str(jdata['xp']) + '/50)' + '\n‚Ä¢  –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ –≤ —Ç–µ–º–µ: \nüõÅ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ:  ' + str(jdata['daily']) + '\nüìï –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:  ' + str(jdata['education']) + '\nüçî –ï–¥–∞:  ' + str(jdata['food']) + '\nüëî –û–¥–µ–∂–¥–∞:  ' + str(jdata['wear']) + '\n‚úà –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:  ' + str(jdata['travel']) + '\nüèÜ –í—Å–µ–≥–æ —Å–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: ' + full)
		else:
			full = str(int(jdata['daily'])+int(jdata['education'])+int(jdata['food'])+int(jdata['wear'])+int(jdata['travel']))
			bot.send_message(message.chat.id, 'üë§  –í–∞—à –Ω–∏–∫: ' + uname + '\nü•á –í–∞—à —É—Ä–æ–≤–µ–Ω—å: ' + str(jdata['lvl']) + ' (' + str(jdata['xp']) + '/50)' + '\n‚Ä¢  –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ –≤ —Ç–µ–º–µ: \nüõÅ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ:  ' + str(jdata['daily']) + '\nüìï –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:  ' + str(jdata['education']) + '\nüçî –ï–¥–∞:  ' + str(jdata['food']) + '\nüëî –û–¥–µ–∂–¥–∞:  ' + str(jdata['wear']) + '\n‚úà –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:  ' + str(jdata['travel']) + '\nüèÜ –í—Å–µ–≥–æ —Å–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: ' + full)
		myfile.close ()	
	# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	elif message.text == '‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
		filename = "statistics.txt"
		myfile = open(filename, mode='r')
		jdata = json.load(myfile)
		regis = str(jdata['registered'])
		bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ' + regis + '\n–°–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: ' + words_str + '\n–í–µ—Ä—Å–∏—è: ' + version + '\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: @husak –∏ @stefjen07\n')
	# –ù–∞–≥—Ä–∞–¥—ã
	elif message.text == 'üéñ –ù–∞–≥—Ä–∞–¥—ã':
		bot.send_message(message.chat.id, 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
	# –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
	elif message.text == 'üí≥ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å':
		bot.send_message(message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–æ–µ–≥–æ –±–æ—Ç–∞. \n–î–µ–Ω—å–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–∂–µ—Ä—Ç–≤—É–µ—Ç–µ –ø–æ–π–¥—É—Ç –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. \n–ù–∞–ø—Ä–∏–º–µ—Ä –Ω–∞ –æ–ø–ª–∞—Ç—É —Ö–æ—Å—Ç–∏–Ω–≥–∞. \n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞ –Ω–∞ —ç—Ç–∏ —Å—á–µ—Ç–∞ WebMoney: \nZ280729802115 \nR739677431100 \n–°–ø–∞—Å–∏–±–æ –≤–∞–º –±–æ–ª—å—à–æ–µ :)')
	else:
		for x in range(0, len(ids)):
			if ids[x] == message.chat.id:
				if message.text == answer[x]:
					bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ üëç')
					uname = message.chat.username
					filename = "./users/" + uname+".txt"
					myfile = open(filename, mode='r')
					xpdata = json.load(myfile)
					xp_int = str(xpdata['xp'])
					xp_int_1 = int(xp_int) + 1
					global lvl_str
					lvl_int = str(xpdata['lvl'])
					lvl_str = str(lvl_int)
					global xp_str
					if xp_int_1 >= 50:
						lvl_str = str(int(lvl_int) + 1)
						xp_int_1 = 0
						bot.send_message(message.chat.id, 'üèÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ ' + lvl_str)
						print(message.chat.username + ' –ø–æ–≤—ã—Å–∏–ª —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ ' + lvl_str)
					xp_str = str(xp_int_1)
					#—Ç—É–ø–æ –¥–æ—Å—Ç–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
					daily = str(xpdata['daily'])
					education = str(xpdata['education'])
					food = str(xpdata['food'])
					wear = str(xpdata['wear'])
					travel = str(xpdata['travel'])
					reg = str(xpdata['reg'])
					idu = str(xpdata['ID'])
					data = str(xpdata['data'])
					admin = str(xpdata['admin'])
					reward = str(xpdata['reward'])
					myfile.close ()
					filename = "./users/" + uname+".txt"
					myfile = open(filename, mode='w')
					pro_file = {
					'username': uname,
					'ID': idu,
					'data': data,
					'lvl': lvl_str,
					'xp': xp_str,
					'daily': daily,
					'education': education,
					'food': food,
					'wear': wear,
					'travel': travel,
					'reg': reg,
					'admin': admin,
					'reward': reward
					}
					json.dump(pro_file, myfile)
					myfile.close ()
					if category[x] == 1:
						words_daily(message)
					elif category[x] == 2:
						words_education(message)
					elif category[x] == 3:
						words_food(message)
					elif category[x] == 4:
						words_wear(message)
					elif category[x] == 5:
						words_travel(message)
					# elif category[x] == 6:
					# 	newdaily(message)
				elif category[x] != 0:
					bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ üî¥')
				#–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
				else:
					bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É ü§î', reply_markup=markup)

# RUN
bot.polling(none_stop=True)